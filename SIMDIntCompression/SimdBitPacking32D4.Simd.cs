// This file was automatically generated by generate.fsx. Do not modify directly.
// 
// To regenerate this file, run the following command:
// dotnet fsi .\scripts\generateIntegrated.fsx > .\SIMDIntCompression\SimdBitPacking32D4.Simd.cs
//
// References:
// https://github.com/fast-pack/SIMDCompressionAndIntersection

namespace SIMDIntCompression;

using System.Runtime.Intrinsics;

using V128i = System.Runtime.Intrinsics.Vector128<uint>;

/// <summary>
/// SIMD bit packing/unpacking for 32-bit (unsigned) integers.
/// </summary>
public static unsafe partial class SimdBitPacking32D4
{
    private const int VectorSize = 128;

    private static void Pack0(V128i initOffset, uint* input, V128i* output) { }


    private static void Pack1(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack2(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack3(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack4(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack5(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack6(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack7(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack8(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack9(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack10(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack11(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack12(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack13(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack14(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack15(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack16(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack17(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack18(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack19(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack20(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack21(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 19; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack22(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack23(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 21; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 19; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack24(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack25(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 21; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 23; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 19; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack26(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack27(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 25; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 23; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 21; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 26; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 19; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack28(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack29(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 21; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 27; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 19; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 25; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 28; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 23; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 26; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack30(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 26; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 28; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 26; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 28; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack31(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 31;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 1; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 30;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 2; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 29;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 3; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 28;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 4; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 27;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 5; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 26;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 6; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 25;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 7; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 24;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 8; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 23;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 9; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 22;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 10; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 21;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 11; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 20;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 12; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 19;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 13; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 18;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 14; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 17;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 15; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 16;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 16; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 15;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 17; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 14;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 18; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 13;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 19; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 12;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 20; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 11;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 21; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 10;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 22; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 9;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 23; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 8;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 24; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 7;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 25; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 6;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 26; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 5;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 27; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 4;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 28; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 3;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 29; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 2;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        outReg = inReg >> 30; 
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg |= inReg << 1;
        Vector128.Store(outReg, (uint*)output);
    }


    private static void Pack32(V128i initOffset, uint* input, V128i* output)
    {
        V128i* inVec = (V128i*)input;
        V128i outReg;

        V128i currIn = Vector128.Load((uint*)inVec);
        V128i inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
        ++output;
        currIn = Vector128.Load((uint*)++inVec);
        inReg = currIn - initOffset;
        initOffset = currIn;

        outReg = inReg;
        Vector128.Store(outReg, (uint*)output);
    }


    private static V128i Unpack0(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i zero = V128i.Zero;

        for (int i = 0; i < 8; i++)
        {
            Vector128.Store(initOffset, (uint*)outVec++);
            Vector128.Store(initOffset, (uint*)outVec++);
            Vector128.Store(initOffset, (uint*)outVec++);
            Vector128.Store(initOffset, (uint*)outVec++);
        }
        return initOffset;
    }


    private static V128i Unpack1(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 1) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack2(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 2) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack3(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 3) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 3 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 3 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack4(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 4) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack5(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 5) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 5 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 5 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 5 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 5 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack6(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 6) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 6 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 6 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 6 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 6 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack7(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 7) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 7 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 7 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 7 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 7 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 7 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 7 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack8(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 8) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack9(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 9) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 9 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack10(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 10) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 10 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack11(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 11) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 11 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack12(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 12) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 12 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack13(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 13) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 13 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack14(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 14) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 14 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack15(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 15) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 15 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack16(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 16) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack17(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 17) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 17 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack18(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 18) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 18 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack19(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 19) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 19 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack20(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 20) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 20 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack21(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 21) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 19) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 21 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack22(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 22) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 22 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack23(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 23) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 19) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 21) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 23 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack24(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 24) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 24 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack25(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 25) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 19) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 23) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 21) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 25 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack26(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 26) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 26 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack27(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 27) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 19) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 26) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 21) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 23) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 25) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 27 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack28(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 28) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 28 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack29(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 29) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 26) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 23) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 28) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 25) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 19) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 27) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 21) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 29 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack30(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 30) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 28) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 26) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 28) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 26) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 30 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack31(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inReg = Vector128.Load((uint*)input);
        V128i outReg;
        V128i tmp;
        V128i mask = Vector128.Create((1u << 31) - 1);

        tmp = inReg;
        outReg = tmp & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 31;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 30) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 30;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 29) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 29;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 28) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 28;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 27) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 27;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 26) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 26;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 25) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 25;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 24) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 24;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 23) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 23;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 22) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 22;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 21) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 21;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 20) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 20;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 19) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 19;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 18) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 18;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 17) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 17;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 16) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 16;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 15) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 15;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 14) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 14;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 13) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 13;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 12) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 12;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 11) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 11;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 10) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 10;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 9) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 9;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 8) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 8;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 7) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 7;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 6) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 6;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 5) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 5;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 4) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 4;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 3) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 3;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 2) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 2;
        outReg = tmp;
        inReg = Vector128.Load((uint*)++input);
        outReg |= (inReg << 31 - 1) & mask;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        tmp = inReg >> 1;
        outReg = tmp;
        outReg += initOffset;
        initOffset = outReg;
        Vector128.Store(outReg, (uint*)outVec++);

        return initOffset;
    }


    private static V128i Unpack32(V128i initOffset, V128i* input, uint* output)
    {
        V128i* outVec = (V128i*)output;
        V128i inVec = default;
        for (int outer = 0; outer < 32; outer++)
        {
            inVec = Vector128.Load((uint*)input++);
            Vector128.Store(inVec, (uint*)outVec++);
        }
        return inVec;
    }

    public static void Pack(V128i initOffset, uint* input, V128i* output, int bit)
    {
        switch (bit)
        {
            case 0: Pack0(initOffset, input, output); break; 
            case 1: Pack1(initOffset, input, output); break; 
            case 2: Pack2(initOffset, input, output); break; 
            case 3: Pack3(initOffset, input, output); break; 
            case 4: Pack4(initOffset, input, output); break; 
            case 5: Pack5(initOffset, input, output); break; 
            case 6: Pack6(initOffset, input, output); break; 
            case 7: Pack7(initOffset, input, output); break; 
            case 8: Pack8(initOffset, input, output); break; 
            case 9: Pack9(initOffset, input, output); break; 
            case 10: Pack10(initOffset, input, output); break; 
            case 11: Pack11(initOffset, input, output); break; 
            case 12: Pack12(initOffset, input, output); break; 
            case 13: Pack13(initOffset, input, output); break; 
            case 14: Pack14(initOffset, input, output); break; 
            case 15: Pack15(initOffset, input, output); break; 
            case 16: Pack16(initOffset, input, output); break; 
            case 17: Pack17(initOffset, input, output); break; 
            case 18: Pack18(initOffset, input, output); break; 
            case 19: Pack19(initOffset, input, output); break; 
            case 20: Pack20(initOffset, input, output); break; 
            case 21: Pack21(initOffset, input, output); break; 
            case 22: Pack22(initOffset, input, output); break; 
            case 23: Pack23(initOffset, input, output); break; 
            case 24: Pack24(initOffset, input, output); break; 
            case 25: Pack25(initOffset, input, output); break; 
            case 26: Pack26(initOffset, input, output); break; 
            case 27: Pack27(initOffset, input, output); break; 
            case 28: Pack28(initOffset, input, output); break; 
            case 29: Pack29(initOffset, input, output); break; 
            case 30: Pack30(initOffset, input, output); break; 
            case 31: Pack31(initOffset, input, output); break; 
            case 32: Pack32(initOffset, input, output); break; 
            // NOTE: Pack32 could be further optimized since it's an extreme edge case
            default: throw new ArgumentException("Unsupported bit width.");
        }
    }

    public static V128i Unpack(V128i initOffset, V128i* input, uint* output, int bit) => bit switch
    {
        0 => Unpack0(initOffset, input, output),
        1 => Unpack1(initOffset, input, output),
        2 => Unpack2(initOffset, input, output),
        3 => Unpack3(initOffset, input, output),
        4 => Unpack4(initOffset, input, output),
        5 => Unpack5(initOffset, input, output),
        6 => Unpack6(initOffset, input, output),
        7 => Unpack7(initOffset, input, output),
        8 => Unpack8(initOffset, input, output),
        9 => Unpack9(initOffset, input, output),
        10 => Unpack10(initOffset, input, output),
        11 => Unpack11(initOffset, input, output),
        12 => Unpack12(initOffset, input, output),
        13 => Unpack13(initOffset, input, output),
        14 => Unpack14(initOffset, input, output),
        15 => Unpack15(initOffset, input, output),
        16 => Unpack16(initOffset, input, output),
        17 => Unpack17(initOffset, input, output),
        18 => Unpack18(initOffset, input, output),
        19 => Unpack19(initOffset, input, output),
        20 => Unpack20(initOffset, input, output),
        21 => Unpack21(initOffset, input, output),
        22 => Unpack22(initOffset, input, output),
        23 => Unpack23(initOffset, input, output),
        24 => Unpack24(initOffset, input, output),
        25 => Unpack25(initOffset, input, output),
        26 => Unpack26(initOffset, input, output),
        27 => Unpack27(initOffset, input, output),
        28 => Unpack28(initOffset, input, output),
        29 => Unpack29(initOffset, input, output),
        30 => Unpack30(initOffset, input, output),
        31 => Unpack31(initOffset, input, output),
        32 => Unpack32(initOffset, input, output),
        _ => throw new ArgumentException("Unsupported bit width.")
    };
}

